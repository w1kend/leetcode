package maximumerasurevalue

import (
	"leetcode/go/test"
	"testing"
)

func Test_maximumUniqueSubarray(t *testing.T) {
	tests := []struct {
		name string
		nums []int
		want int
	}{
		{
			name: "e1",
			nums: []int{4, 2, 4, 5, 6}, // [2,4,5,6]
			want: 17,
		},

		{
			name: "e2",
			nums: []int{5, 2, 1, 2, 5, 2, 1, 2, 5}, //[5,2,1] ||[1,2,5]
			want: 8,
		},
		{
			name: "m3",
			nums: []int{3, 3, 3, 3, 3, 3, 3, 3},
			want: 3,
		},
		{
			name: "m4",
			nums: []int{},
			want: 0,
		},
		{
			name: "m5",
			nums: []int{10},
			want: 10,
		},
		{
			name: "m6",
			nums: []int{1, 2, 3, 4, 5, 6, 7},
			want: 28,
		},
		{
			name: "m7",
			nums: []int{1, 2, 2, 10},
			want: 12,
		},
		{
			name: "e8",
			nums: []int{94, 112, 89, 564, 615, 638, 221, 471, 279, 668, 757, 664, 636, 855, 41, 773, 381, 317, 971, 340, 924, 96, 96, 556, 281, 279, 631, 551, 722, 267, 518, 634, 861, 256, 640, 505, 705, 895, 4, 106, 372, 263, 178, 526, 447, 404, 774, 632, 437, 956, 202, 366, 790, 71, 724, 918, 321, 574, 268, 541, 175, 762, 656, 877, 347, 587, 735, 729, 39, 848, 361, 715, 339, 738, 588, 188, 502, 64, 775, 162, 730, 400, 614, 163, 746, 726, 652, 636, 652, 493, 78, 206, 997, 975, 230, 194, 645, 501, 139, 28, 532, 818, 974, 380, 751, 710, 376, 914, 924, 193, 119, 813, 474, 161, 548, 266, 447, 888, 573, 501, 59, 982, 496, 941, 459, 13, 554, 700, 388, 354, 605, 394, 112, 566, 429, 172, 118, 129, 867, 124, 38, 676, 43, 549, 118, 41, 391, 236, 24, 878, 524, 355, 963, 34, 626, 287, 19, 434, 661, 34, 949, 655, 751, 890, 536, 633, 887, 711, 383, 314, 350, 908, 243, 832, 532, 51, 54, 859, 370, 126, 234, 599, 721, 699, 610, 737, 17, 322, 768, 167, 196, 826, 351, 898, 298, 645, 667, 6, 239, 431, 117, 496, 141, 490, 770, 513, 948, 42, 128, 388, 49, 362, 911, 942, 389, 683, 79, 727, 96, 501, 384, 964, 79, 254, 820, 389, 284, 639, 970, 632, 961, 361, 271, 989, 308, 112, 937, 568, 982, 305, 545, 744, 58, 391, 933, 288, 26, 625, 90, 152, 52, 373, 278, 821, 709, 779, 784, 996, 334, 381, 456, 411, 993, 37, 201, 263, 168, 491, 43, 774, 8, 901, 312, 397, 824, 809, 276, 459, 899, 829, 316, 649, 772, 416, 149, 696, 393, 295, 58, 128, 815, 468, 449, 945, 111, 869, 42, 665, 677, 310, 463, 403, 188, 421, 2, 13, 817, 908, 40, 679, 540, 780, 308, 962, 871, 598, 79, 707, 473, 653, 785, 702, 766, 52, 465, 223, 211, 863, 723, 51, 419, 104, 754, 363, 599, 417, 222, 547, 749, 425, 699, 779, 144, 844, 225, 212, 636, 208, 391, 169, 959, 738, 922, 804, 64, 200, 758, 683, 45, 666, 818, 924, 423, 153, 15, 304, 645, 106, 369, 199, 651, 720, 539, 494, 900, 216, 385, 214, 847, 125, 131, 646, 715, 472, 33, 281, 981, 80, 291, 508, 279, 139, 182, 253, 255, 616, 52, 903, 298, 534, 417, 868, 313, 868, 641, 210, 467, 649, 667, 276, 568, 60, 585, 833, 263, 278, 350, 269, 949, 189, 347, 824, 558, 309, 123, 527, 265, 663, 412, 593, 872, 668, 62, 954, 577, 731, 491, 627, 2, 994, 671, 988, 3, 766, 737, 625, 935, 708, 963, 266, 2, 314, 510, 349, 453, 706, 639, 780, 975, 125, 103, 811, 13, 884, 356, 709, 79, 531, 115, 868, 74, 944, 141, 846, 733, 732, 366, 714, 935, 635, 724, 54, 20, 70, 682, 909, 302, 258, 843, 496, 668, 170, 830, 37, 717, 413, 627, 992, 596, 583, 685, 876, 268, 291, 648, 920, 765, 370, 811, 484, 153, 68, 482, 335, 676, 170, 471, 701, 139, 171, 933, 773, 73, 780, 110, 38, 610, 626, 351, 848, 26, 283, 867, 293, 102, 58, 713, 689, 304, 438, 543, 22, 229, 219, 343, 166, 143, 279, 560, 827, 986, 873, 422, 245, 420, 99, 227, 831, 890, 190, 399, 786, 678, 542, 558, 159, 717, 980, 245, 664, 451, 765, 101, 775, 494, 677, 787, 815, 751, 289, 32, 828, 897, 144, 436, 664, 229, 637, 218, 584, 248, 607, 441, 770, 64, 68, 523, 332, 203, 172, 961, 699, 290, 631, 483, 919, 474, 266, 236, 538, 916, 774, 492, 210, 292, 640, 965, 241, 206, 730, 863, 225, 406, 679, 154, 458, 980, 887, 685, 539, 346, 372, 714, 756, 459, 796, 513, 231, 664, 245, 974, 411, 926, 782, 911, 310, 944, 223, 280, 339, 735, 927, 960, 775, 813, 499, 761, 408, 643, 258, 187, 211, 132, 20, 477, 556, 466, 673, 594, 429, 500, 486, 822, 951, 375, 289, 556, 676, 329, 918, 198, 37, 867, 251, 596, 279, 775, 24, 986, 697, 690, 6, 656, 762, 942, 493, 12, 139, 170, 342, 899, 507, 614, 296, 355, 560, 501, 680, 284, 840, 873, 517, 892, 979, 503, 410, 423, 413, 927, 87, 120},
			want: 65669,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := maximumUniqueSubarray(tt.nums)
			test.AssertEqual(t, got, tt.want, "")
		})
	}
}
